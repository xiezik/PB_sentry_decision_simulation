// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_decision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EscapeConstraint_decision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_decision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRobot_decision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_decision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_decision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_decision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchConstraint_decision_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_decision_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhirlVel_decision_2eproto;
namespace hero_decision {
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class EscapeConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EscapeConstraint> _instance;
} _EscapeConstraint_default_instance_;
class SearchConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchConstraint> _instance;
} _SearchConstraint_default_instance_;
class WhirlVelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WhirlVel> _instance;
} _WhirlVel_default_instance_;
class MultiRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiRobot> _instance;
} _MultiRobot_default_instance_;
class DecisionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecisionConfig> _instance;
} _DecisionConfig_default_instance_;
}  // namespace hero_decision
static void InitDefaultsscc_info_DecisionConfig_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_DecisionConfig_default_instance_;
    new (ptr) ::hero_decision::DecisionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::DecisionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DecisionConfig_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DecisionConfig_decision_2eproto}, {
      &scc_info_Point_decision_2eproto.base,
      &scc_info_EscapeConstraint_decision_2eproto.base,
      &scc_info_SearchConstraint_decision_2eproto.base,
      &scc_info_WhirlVel_decision_2eproto.base,
      &scc_info_MultiRobot_decision_2eproto.base,}};

static void InitDefaultsscc_info_EscapeConstraint_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_EscapeConstraint_default_instance_;
    new (ptr) ::hero_decision::EscapeConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::EscapeConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EscapeConstraint_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EscapeConstraint_decision_2eproto}, {}};

static void InitDefaultsscc_info_MultiRobot_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_MultiRobot_default_instance_;
    new (ptr) ::hero_decision::MultiRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::MultiRobot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiRobot_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiRobot_decision_2eproto}, {
      &scc_info_Point_decision_2eproto.base,}};

static void InitDefaultsscc_info_Point_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_Point_default_instance_;
    new (ptr) ::hero_decision::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_decision_2eproto}, {}};

static void InitDefaultsscc_info_SearchConstraint_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_SearchConstraint_default_instance_;
    new (ptr) ::hero_decision::SearchConstraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::SearchConstraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchConstraint_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchConstraint_decision_2eproto}, {}};

static void InitDefaultsscc_info_WhirlVel_decision_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_decision::_WhirlVel_default_instance_;
    new (ptr) ::hero_decision::WhirlVel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_decision::WhirlVel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WhirlVel_decision_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WhirlVel_decision_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_decision_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_decision_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_decision_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_decision_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, x_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, y_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, z_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, roll_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, pitch_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::Point, yaw_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, left_x_limit_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, right_x_limit_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, robot_x_limit_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, left_random_min_x_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, left_random_max_x_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, right_random_min_x_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::EscapeConstraint, right_random_max_x_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::hero_decision::SearchConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::SearchConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::SearchConstraint, x_limit_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::SearchConstraint, y_limit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero_decision::WhirlVel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::WhirlVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::WhirlVel, angle_x_vel_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::WhirlVel, angle_y_vel_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::WhirlVel, angle_z_vel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero_decision::MultiRobot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::MultiRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::MultiRobot, start_position_),
  0,
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, point_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, simulate_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, master_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, escape_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, buff_point_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, search_limit_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, whirl_vel_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, wing_bot_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, master_bot_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, wing_bot_task_point_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, search_region_1_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, search_region_2_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, search_region_3_),
  PROTOBUF_FIELD_OFFSET(::hero_decision::DecisionConfig, search_region_4_),
  ~0u,
  6,
  7,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::hero_decision::Point)},
  { 17, 29, sizeof(::hero_decision::EscapeConstraint)},
  { 36, 43, sizeof(::hero_decision::SearchConstraint)},
  { 45, 53, sizeof(::hero_decision::WhirlVel)},
  { 56, 62, sizeof(::hero_decision::MultiRobot)},
  { 63, 82, sizeof(::hero_decision::DecisionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_EscapeConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_SearchConstraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_WhirlVel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_MultiRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_decision::_DecisionConfig_default_instance_),
};

const char descriptor_table_protodef_decision_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016decision.proto\022\rhero_decision\"R\n\005Point"
  "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004rol"
  "l\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304\001\n\020"
  "EscapeConstraint\022\024\n\014left_x_limit\030\001 \001(\002\022\025"
  "\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limit\030\003"
  " \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021left_"
  "random_max_x\030\005 \001(\002\022\032\n\022right_random_min_x"
  "\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n\020Se"
  "archConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_lim"
  "it\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001 \001("
  "\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel\030\003 "
  "\001(\002\":\n\nMultiRobot\022,\n\016start_position\030\007 \001("
  "\0132\024.hero_decision.Point\"\356\004\n\016DecisionConf"
  "ig\022#\n\005point\030\001 \003(\0132\024.hero_decision.Point\022"
  "\027\n\010simulate\030\002 \001(\010:\005false\022\025\n\006master\030\003 \001(\010"
  ":\005false\022/\n\006escape\030\004 \001(\0132\037.hero_decision."
  "EscapeConstraint\022(\n\nbuff_point\030\005 \003(\0132\024.h"
  "ero_decision.Point\0225\n\014search_limit\030\006 \001(\013"
  "2\037.hero_decision.SearchConstraint\022*\n\twhi"
  "rl_vel\030\007 \001(\0132\027.hero_decision.WhirlVel\022+\n"
  "\010wing_bot\030\010 \001(\0132\031.hero_decision.MultiRob"
  "ot\022-\n\nmaster_bot\030\t \001(\0132\031.hero_decision.M"
  "ultiRobot\0221\n\023wing_bot_task_point\030\n \001(\0132\024"
  ".hero_decision.Point\022-\n\017search_region_1\030"
  "\013 \003(\0132\024.hero_decision.Point\022-\n\017search_re"
  "gion_2\030\014 \003(\0132\024.hero_decision.Point\022-\n\017se"
  "arch_region_3\030\r \003(\0132\024.hero_decision.Poin"
  "t\022-\n\017search_region_4\030\016 \003(\0132\024.hero_decisi"
  "on.Point"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_decision_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_decision_2eproto_sccs[6] = {
  &scc_info_DecisionConfig_decision_2eproto.base,
  &scc_info_EscapeConstraint_decision_2eproto.base,
  &scc_info_MultiRobot_decision_2eproto.base,
  &scc_info_Point_decision_2eproto.base,
  &scc_info_SearchConstraint_decision_2eproto.base,
  &scc_info_WhirlVel_decision_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_decision_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_decision_2eproto = {
  false, false, descriptor_table_protodef_decision_2eproto, "decision.proto", 1128,
  &descriptor_table_decision_2eproto_once, descriptor_table_decision_2eproto_sccs, descriptor_table_decision_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_decision_2eproto::offsets,
  file_level_metadata_decision_2eproto, 6, file_level_enum_descriptors_decision_2eproto, file_level_service_descriptors_decision_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_decision_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_decision_2eproto)), true);
namespace hero_decision {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Point>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:hero_decision.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:hero_decision.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_decision_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yaw_) -
        reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float roll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_roll(&has_bits);
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_pitch(&has_bits);
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_yaw(&has_bits);
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float roll = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_roll(), target);
  }

  // optional float pitch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // optional float yaw = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      roll_ = from.roll_;
    }
    if (cached_has_bits & 0x00000010u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000020u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, yaw_)
      + sizeof(Point::yaw_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EscapeConstraint::InitAsDefaultInstance() {
}
class EscapeConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<EscapeConstraint>()._has_bits_);
  static void set_has_left_x_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right_x_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_robot_x_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left_random_min_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_left_random_max_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_random_min_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_right_random_max_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

EscapeConstraint::EscapeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.EscapeConstraint)
}
EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_x_limit_, &from.left_x_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_random_max_x_) -
    reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
  // @@protoc_insertion_point(copy_constructor:hero_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  ::memset(&left_x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_random_max_x_) -
      reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:hero_decision.EscapeConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EscapeConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EscapeConstraint::ArenaDtor(void* object) {
  EscapeConstraint* _this = reinterpret_cast< EscapeConstraint* >(object);
  (void)_this;
}
void EscapeConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EscapeConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EscapeConstraint& EscapeConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EscapeConstraint_decision_2eproto.base);
  return *internal_default_instance();
}


void EscapeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.EscapeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&left_x_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_random_max_x_) -
        reinterpret_cast<char*>(&left_x_limit_)) + sizeof(right_random_max_x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EscapeConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float left_x_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_left_x_limit(&has_bits);
          left_x_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_x_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_right_x_limit(&has_bits);
          right_x_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float robot_x_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_robot_x_limit(&has_bits);
          robot_x_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left_random_min_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_left_random_min_x(&has_bits);
          left_random_min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float left_random_max_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_left_random_max_x(&has_bits);
          left_random_max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_random_min_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_right_random_min_x(&has_bits);
          right_random_min_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float right_random_max_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_right_random_max_x(&has_bits);
          right_random_max_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EscapeConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.EscapeConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float left_x_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_right_random_max_x(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.EscapeConstraint)
  return target;
}

size_t EscapeConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.EscapeConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float left_x_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.EscapeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const EscapeConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EscapeConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.EscapeConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.EscapeConstraint)
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.EscapeConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      left_x_limit_ = from.left_x_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_x_limit_ = from.right_x_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      robot_x_limit_ = from.robot_x_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_random_min_x_ = from.left_random_min_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      left_random_max_x_ = from.left_random_max_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_random_min_x_ = from.right_random_min_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      right_random_max_x_ = from.right_random_max_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EscapeConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {
  return true;
}

void EscapeConstraint::InternalSwap(EscapeConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EscapeConstraint, right_random_max_x_)
      + sizeof(EscapeConstraint::right_random_max_x_)
      - PROTOBUF_FIELD_OFFSET(EscapeConstraint, left_x_limit_)>(
          reinterpret_cast<char*>(&left_x_limit_),
          reinterpret_cast<char*>(&other->left_x_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EscapeConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchConstraint::InitAsDefaultInstance() {
}
class SearchConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<SearchConstraint>()._has_bits_);
  static void set_has_x_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SearchConstraint::SearchConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.SearchConstraint)
}
SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_limit_, &from.x_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_limit_) -
    reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
  // @@protoc_insertion_point(copy_constructor:hero_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  ::memset(&x_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_limit_) -
      reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:hero_decision.SearchConstraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchConstraint::ArenaDtor(void* object) {
  SearchConstraint* _this = reinterpret_cast< SearchConstraint* >(object);
  (void)_this;
}
void SearchConstraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchConstraint& SearchConstraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchConstraint_decision_2eproto.base);
  return *internal_default_instance();
}


void SearchConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.SearchConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_limit_) -
        reinterpret_cast<char*>(&x_limit_)) + sizeof(y_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchConstraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x_limit(&has_bits);
          x_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y_limit(&has_bits);
          y_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchConstraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.SearchConstraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_limit(), target);
  }

  // optional float y_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.SearchConstraint)
  return target;
}

size_t SearchConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.SearchConstraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x_limit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchConstraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.SearchConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchConstraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchConstraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.SearchConstraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.SearchConstraint)
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.SearchConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_limit_ = from.x_limit_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_limit_ = from.y_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SearchConstraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {
  return true;
}

void SearchConstraint::InternalSwap(SearchConstraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchConstraint, y_limit_)
      + sizeof(SearchConstraint::y_limit_)
      - PROTOBUF_FIELD_OFFSET(SearchConstraint, x_limit_)>(
          reinterpret_cast<char*>(&x_limit_),
          reinterpret_cast<char*>(&other->x_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchConstraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WhirlVel::InitAsDefaultInstance() {
}
class WhirlVel::_Internal {
 public:
  using HasBits = decltype(std::declval<WhirlVel>()._has_bits_);
  static void set_has_angle_x_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_angle_y_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle_z_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

WhirlVel::WhirlVel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.WhirlVel)
}
WhirlVel::WhirlVel(const WhirlVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&angle_x_vel_, &from.angle_x_vel_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_z_vel_) -
    reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
  // @@protoc_insertion_point(copy_constructor:hero_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  ::memset(&angle_x_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_z_vel_) -
      reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:hero_decision.WhirlVel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WhirlVel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WhirlVel::ArenaDtor(void* object) {
  WhirlVel* _this = reinterpret_cast< WhirlVel* >(object);
  (void)_this;
}
void WhirlVel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WhirlVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WhirlVel& WhirlVel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WhirlVel_decision_2eproto.base);
  return *internal_default_instance();
}


void WhirlVel::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.WhirlVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&angle_x_vel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_z_vel_) -
        reinterpret_cast<char*>(&angle_x_vel_)) + sizeof(angle_z_vel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhirlVel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float angle_x_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_angle_x_vel(&has_bits);
          angle_x_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle_y_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_angle_y_vel(&has_bits);
          angle_y_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle_z_vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angle_z_vel(&has_bits);
          angle_z_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WhirlVel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.WhirlVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle_x_vel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle_z_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.WhirlVel)
  return target;
}

size_t WhirlVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.WhirlVel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float angle_x_vel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WhirlVel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.WhirlVel)
  GOOGLE_DCHECK_NE(&from, this);
  const WhirlVel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WhirlVel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.WhirlVel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.WhirlVel)
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.WhirlVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      angle_x_vel_ = from.angle_x_vel_;
    }
    if (cached_has_bits & 0x00000002u) {
      angle_y_vel_ = from.angle_y_vel_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_z_vel_ = from.angle_z_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WhirlVel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {
  return true;
}

void WhirlVel::InternalSwap(WhirlVel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhirlVel, angle_z_vel_)
      + sizeof(WhirlVel::angle_z_vel_)
      - PROTOBUF_FIELD_OFFSET(WhirlVel, angle_x_vel_)>(
          reinterpret_cast<char*>(&angle_x_vel_),
          reinterpret_cast<char*>(&other->angle_x_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WhirlVel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiRobot::InitAsDefaultInstance() {
  ::hero_decision::_MultiRobot_default_instance_._instance.get_mutable()->start_position_ = const_cast< ::hero_decision::Point*>(
      ::hero_decision::Point::internal_default_instance());
}
class MultiRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiRobot>()._has_bits_);
  static const ::hero_decision::Point& start_position(const MultiRobot* msg);
  static void set_has_start_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hero_decision::Point&
MultiRobot::_Internal::start_position(const MultiRobot* msg) {
  return *msg->start_position_;
}
MultiRobot::MultiRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.MultiRobot)
}
MultiRobot::MultiRobot(const MultiRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_position()) {
    start_position_ = new ::hero_decision::Point(*from.start_position_);
  } else {
    start_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hero_decision.MultiRobot)
}

void MultiRobot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiRobot_decision_2eproto.base);
  start_position_ = nullptr;
}

MultiRobot::~MultiRobot() {
  // @@protoc_insertion_point(destructor:hero_decision.MultiRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_position_;
}

void MultiRobot::ArenaDtor(void* object) {
  MultiRobot* _this = reinterpret_cast< MultiRobot* >(object);
  (void)_this;
}
void MultiRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiRobot& MultiRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiRobot_decision_2eproto.base);
  return *internal_default_instance();
}


void MultiRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.MultiRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(start_position_ != nullptr);
    start_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero_decision.Point start_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.MultiRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero_decision.Point start_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::start_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.MultiRobot)
  return target;
}

size_t MultiRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.MultiRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hero_decision.Point start_position = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.MultiRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.MultiRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.MultiRobot)
    MergeFrom(*source);
  }
}

void MultiRobot::MergeFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.MultiRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_position()) {
    _internal_mutable_start_position()->::hero_decision::Point::MergeFrom(from._internal_start_position());
  }
}

void MultiRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRobot::CopyFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRobot::IsInitialized() const {
  return true;
}

void MultiRobot::InternalSwap(MultiRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_position_, other->start_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecisionConfig::InitAsDefaultInstance() {
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->escape_ = const_cast< ::hero_decision::EscapeConstraint*>(
      ::hero_decision::EscapeConstraint::internal_default_instance());
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->search_limit_ = const_cast< ::hero_decision::SearchConstraint*>(
      ::hero_decision::SearchConstraint::internal_default_instance());
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->whirl_vel_ = const_cast< ::hero_decision::WhirlVel*>(
      ::hero_decision::WhirlVel::internal_default_instance());
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->wing_bot_ = const_cast< ::hero_decision::MultiRobot*>(
      ::hero_decision::MultiRobot::internal_default_instance());
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->master_bot_ = const_cast< ::hero_decision::MultiRobot*>(
      ::hero_decision::MultiRobot::internal_default_instance());
  ::hero_decision::_DecisionConfig_default_instance_._instance.get_mutable()->wing_bot_task_point_ = const_cast< ::hero_decision::Point*>(
      ::hero_decision::Point::internal_default_instance());
}
class DecisionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionConfig>()._has_bits_);
  static void set_has_simulate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hero_decision::EscapeConstraint& escape(const DecisionConfig* msg);
  static void set_has_escape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hero_decision::SearchConstraint& search_limit(const DecisionConfig* msg);
  static void set_has_search_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hero_decision::WhirlVel& whirl_vel(const DecisionConfig* msg);
  static void set_has_whirl_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hero_decision::MultiRobot& wing_bot(const DecisionConfig* msg);
  static void set_has_wing_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hero_decision::MultiRobot& master_bot(const DecisionConfig* msg);
  static void set_has_master_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hero_decision::Point& wing_bot_task_point(const DecisionConfig* msg);
  static void set_has_wing_bot_task_point(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hero_decision::EscapeConstraint&
DecisionConfig::_Internal::escape(const DecisionConfig* msg) {
  return *msg->escape_;
}
const ::hero_decision::SearchConstraint&
DecisionConfig::_Internal::search_limit(const DecisionConfig* msg) {
  return *msg->search_limit_;
}
const ::hero_decision::WhirlVel&
DecisionConfig::_Internal::whirl_vel(const DecisionConfig* msg) {
  return *msg->whirl_vel_;
}
const ::hero_decision::MultiRobot&
DecisionConfig::_Internal::wing_bot(const DecisionConfig* msg) {
  return *msg->wing_bot_;
}
const ::hero_decision::MultiRobot&
DecisionConfig::_Internal::master_bot(const DecisionConfig* msg) {
  return *msg->master_bot_;
}
const ::hero_decision::Point&
DecisionConfig::_Internal::wing_bot_task_point(const DecisionConfig* msg) {
  return *msg->wing_bot_task_point_;
}
DecisionConfig::DecisionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena),
  buff_point_(arena),
  search_region_1_(arena),
  search_region_2_(arena),
  search_region_3_(arena),
  search_region_4_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_decision.DecisionConfig)
}
DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      point_(from.point_),
      buff_point_(from.buff_point_),
      search_region_1_(from.search_region_1_),
      search_region_2_(from.search_region_2_),
      search_region_3_(from.search_region_3_),
      search_region_4_(from.search_region_4_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_escape()) {
    escape_ = new ::hero_decision::EscapeConstraint(*from.escape_);
  } else {
    escape_ = nullptr;
  }
  if (from._internal_has_search_limit()) {
    search_limit_ = new ::hero_decision::SearchConstraint(*from.search_limit_);
  } else {
    search_limit_ = nullptr;
  }
  if (from._internal_has_whirl_vel()) {
    whirl_vel_ = new ::hero_decision::WhirlVel(*from.whirl_vel_);
  } else {
    whirl_vel_ = nullptr;
  }
  if (from._internal_has_wing_bot()) {
    wing_bot_ = new ::hero_decision::MultiRobot(*from.wing_bot_);
  } else {
    wing_bot_ = nullptr;
  }
  if (from._internal_has_master_bot()) {
    master_bot_ = new ::hero_decision::MultiRobot(*from.master_bot_);
  } else {
    master_bot_ = nullptr;
  }
  if (from._internal_has_wing_bot_task_point()) {
    wing_bot_task_point_ = new ::hero_decision::Point(*from.wing_bot_task_point_);
  } else {
    wing_bot_task_point_ = nullptr;
  }
  ::memcpy(&simulate_, &from.simulate_,
    static_cast<size_t>(reinterpret_cast<char*>(&master_) -
    reinterpret_cast<char*>(&simulate_)) + sizeof(master_));
  // @@protoc_insertion_point(copy_constructor:hero_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecisionConfig_decision_2eproto.base);
  ::memset(&escape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_) -
      reinterpret_cast<char*>(&escape_)) + sizeof(master_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:hero_decision.DecisionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecisionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete escape_;
  if (this != internal_default_instance()) delete search_limit_;
  if (this != internal_default_instance()) delete whirl_vel_;
  if (this != internal_default_instance()) delete wing_bot_;
  if (this != internal_default_instance()) delete master_bot_;
  if (this != internal_default_instance()) delete wing_bot_task_point_;
}

void DecisionConfig::ArenaDtor(void* object) {
  DecisionConfig* _this = reinterpret_cast< DecisionConfig* >(object);
  (void)_this;
}
void DecisionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecisionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecisionConfig& DecisionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecisionConfig_decision_2eproto.base);
  return *internal_default_instance();
}


void DecisionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_decision.DecisionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  buff_point_.Clear();
  search_region_1_.Clear();
  search_region_2_.Clear();
  search_region_3_.Clear();
  search_region_4_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(escape_ != nullptr);
      escape_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(search_limit_ != nullptr);
      search_limit_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(whirl_vel_ != nullptr);
      whirl_vel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(wing_bot_ != nullptr);
      wing_bot_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(master_bot_ != nullptr);
      master_bot_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(wing_bot_task_point_ != nullptr);
      wing_bot_task_point_->Clear();
    }
  }
  ::memset(&simulate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&master_) -
      reinterpret_cast<char*>(&simulate_)) + sizeof(master_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero_decision.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool simulate = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_simulate(&has_bits);
          simulate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool master = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_master(&has_bits);
          master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.EscapeConstraint escape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_escape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hero_decision.Point buff_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buff_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.SearchConstraint search_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.WhirlVel whirl_vel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_whirl_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.MultiRobot wing_bot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wing_bot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.MultiRobot master_bot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_bot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero_decision.Point wing_bot_task_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_wing_bot_task_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hero_decision.Point search_region_1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_region_1(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hero_decision.Point search_region_2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_region_2(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hero_decision.Point search_region_3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_region_3(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hero_decision.Point search_region_4 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_region_4(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecisionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_decision.DecisionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero_decision.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool simulate = 2 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_simulate(), target);
  }

  // optional bool master = 3 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_master(), target);
  }

  // optional .hero_decision.EscapeConstraint escape = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::escape(this), target, stream);
  }

  // repeated .hero_decision.Point buff_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buff_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_buff_point(i), target, stream);
  }

  // optional .hero_decision.SearchConstraint search_limit = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::search_limit(this), target, stream);
  }

  // optional .hero_decision.WhirlVel whirl_vel = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::whirl_vel(this), target, stream);
  }

  // optional .hero_decision.MultiRobot wing_bot = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::wing_bot(this), target, stream);
  }

  // optional .hero_decision.MultiRobot master_bot = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::master_bot(this), target, stream);
  }

  // optional .hero_decision.Point wing_bot_task_point = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::wing_bot_task_point(this), target, stream);
  }

  // repeated .hero_decision.Point search_region_1 = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_region_1_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_search_region_1(i), target, stream);
  }

  // repeated .hero_decision.Point search_region_2 = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_region_2_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_search_region_2(i), target, stream);
  }

  // repeated .hero_decision.Point search_region_3 = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_region_3_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_search_region_3(i), target, stream);
  }

  // repeated .hero_decision.Point search_region_4 = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_search_region_4_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_search_region_4(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_decision.DecisionConfig)
  return target;
}

size_t DecisionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_decision.DecisionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero_decision.Point point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero_decision.Point buff_point = 5;
  total_size += 1UL * this->_internal_buff_point_size();
  for (const auto& msg : this->buff_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero_decision.Point search_region_1 = 11;
  total_size += 1UL * this->_internal_search_region_1_size();
  for (const auto& msg : this->search_region_1_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero_decision.Point search_region_2 = 12;
  total_size += 1UL * this->_internal_search_region_2_size();
  for (const auto& msg : this->search_region_2_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero_decision.Point search_region_3 = 13;
  total_size += 1UL * this->_internal_search_region_3_size();
  for (const auto& msg : this->search_region_3_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero_decision.Point search_region_4 = 14;
  total_size += 1UL * this->_internal_search_region_4_size();
  for (const auto& msg : this->search_region_4_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hero_decision.EscapeConstraint escape = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *escape_);
    }

    // optional .hero_decision.SearchConstraint search_limit = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *search_limit_);
    }

    // optional .hero_decision.WhirlVel whirl_vel = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *whirl_vel_);
    }

    // optional .hero_decision.MultiRobot wing_bot = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wing_bot_);
    }

    // optional .hero_decision.MultiRobot master_bot = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_bot_);
    }

    // optional .hero_decision.Point wing_bot_task_point = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wing_bot_task_point_);
    }

    // optional bool simulate = 2 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecisionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_decision.DecisionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecisionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_decision.DecisionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_decision.DecisionConfig)
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_decision.DecisionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  buff_point_.MergeFrom(from.buff_point_);
  search_region_1_.MergeFrom(from.search_region_1_);
  search_region_2_.MergeFrom(from.search_region_2_);
  search_region_3_.MergeFrom(from.search_region_3_);
  search_region_4_.MergeFrom(from.search_region_4_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_escape()->::hero_decision::EscapeConstraint::MergeFrom(from._internal_escape());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_search_limit()->::hero_decision::SearchConstraint::MergeFrom(from._internal_search_limit());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_whirl_vel()->::hero_decision::WhirlVel::MergeFrom(from._internal_whirl_vel());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_wing_bot()->::hero_decision::MultiRobot::MergeFrom(from._internal_wing_bot());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_master_bot()->::hero_decision::MultiRobot::MergeFrom(from._internal_master_bot());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_wing_bot_task_point()->::hero_decision::Point::MergeFrom(from._internal_wing_bot_task_point());
    }
    if (cached_has_bits & 0x00000040u) {
      simulate_ = from.simulate_;
    }
    if (cached_has_bits & 0x00000080u) {
      master_ = from.master_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DecisionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {
  return true;
}

void DecisionConfig::InternalSwap(DecisionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
  buff_point_.InternalSwap(&other->buff_point_);
  search_region_1_.InternalSwap(&other->search_region_1_);
  search_region_2_.InternalSwap(&other->search_region_2_);
  search_region_3_.InternalSwap(&other->search_region_3_);
  search_region_4_.InternalSwap(&other->search_region_4_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionConfig, master_)
      + sizeof(DecisionConfig::master_)
      - PROTOBUF_FIELD_OFFSET(DecisionConfig, escape_)>(
          reinterpret_cast<char*>(&escape_),
          reinterpret_cast<char*>(&other->escape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hero_decision
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hero_decision::Point* Arena::CreateMaybeMessage< ::hero_decision::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::hero_decision::EscapeConstraint* Arena::CreateMaybeMessage< ::hero_decision::EscapeConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::EscapeConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::hero_decision::SearchConstraint* Arena::CreateMaybeMessage< ::hero_decision::SearchConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::SearchConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::hero_decision::WhirlVel* Arena::CreateMaybeMessage< ::hero_decision::WhirlVel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::WhirlVel >(arena);
}
template<> PROTOBUF_NOINLINE ::hero_decision::MultiRobot* Arena::CreateMaybeMessage< ::hero_decision::MultiRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::MultiRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::hero_decision::DecisionConfig* Arena::CreateMaybeMessage< ::hero_decision::DecisionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_decision::DecisionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

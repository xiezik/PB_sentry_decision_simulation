// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_decision_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_decision_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_decision_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_decision_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_decision_2eproto;
namespace hero_decision {
class DecisionConfig;
class DecisionConfigDefaultTypeInternal;
extern DecisionConfigDefaultTypeInternal _DecisionConfig_default_instance_;
class EscapeConstraint;
class EscapeConstraintDefaultTypeInternal;
extern EscapeConstraintDefaultTypeInternal _EscapeConstraint_default_instance_;
class MultiRobot;
class MultiRobotDefaultTypeInternal;
extern MultiRobotDefaultTypeInternal _MultiRobot_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class SearchConstraint;
class SearchConstraintDefaultTypeInternal;
extern SearchConstraintDefaultTypeInternal _SearchConstraint_default_instance_;
class WhirlVel;
class WhirlVelDefaultTypeInternal;
extern WhirlVelDefaultTypeInternal _WhirlVel_default_instance_;
}  // namespace hero_decision
PROTOBUF_NAMESPACE_OPEN
template<> ::hero_decision::DecisionConfig* Arena::CreateMaybeMessage<::hero_decision::DecisionConfig>(Arena*);
template<> ::hero_decision::EscapeConstraint* Arena::CreateMaybeMessage<::hero_decision::EscapeConstraint>(Arena*);
template<> ::hero_decision::MultiRobot* Arena::CreateMaybeMessage<::hero_decision::MultiRobot>(Arena*);
template<> ::hero_decision::Point* Arena::CreateMaybeMessage<::hero_decision::Point>(Arena*);
template<> ::hero_decision::SearchConstraint* Arena::CreateMaybeMessage<::hero_decision::SearchConstraint>(Arena*);
template<> ::hero_decision::WhirlVel* Arena::CreateMaybeMessage<::hero_decision::WhirlVel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hero_decision {

// ===================================================================

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kRollFieldNumber = 4,
    kPitchFieldNumber = 5,
    kYawFieldNumber = 6,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float roll = 4;
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // optional float pitch = 5;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // optional float yaw = 6;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:hero_decision.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float roll_;
  float pitch_;
  float yaw_;
  friend struct ::TableStruct_decision_2eproto;
};
// -------------------------------------------------------------------

class EscapeConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.EscapeConstraint) */ {
 public:
  inline EscapeConstraint() : EscapeConstraint(nullptr) {};
  virtual ~EscapeConstraint();

  EscapeConstraint(const EscapeConstraint& from);
  EscapeConstraint(EscapeConstraint&& from) noexcept
    : EscapeConstraint() {
    *this = ::std::move(from);
  }

  inline EscapeConstraint& operator=(const EscapeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EscapeConstraint& operator=(EscapeConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EscapeConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EscapeConstraint* internal_default_instance() {
    return reinterpret_cast<const EscapeConstraint*>(
               &_EscapeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EscapeConstraint& a, EscapeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(EscapeConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EscapeConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EscapeConstraint* New() const final {
    return CreateMaybeMessage<EscapeConstraint>(nullptr);
  }

  EscapeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EscapeConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EscapeConstraint& from);
  void MergeFrom(const EscapeConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EscapeConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.EscapeConstraint";
  }
  protected:
  explicit EscapeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftXLimitFieldNumber = 1,
    kRightXLimitFieldNumber = 2,
    kRobotXLimitFieldNumber = 3,
    kLeftRandomMinXFieldNumber = 4,
    kLeftRandomMaxXFieldNumber = 5,
    kRightRandomMinXFieldNumber = 6,
    kRightRandomMaxXFieldNumber = 7,
  };
  // optional float left_x_limit = 1;
  bool has_left_x_limit() const;
  private:
  bool _internal_has_left_x_limit() const;
  public:
  void clear_left_x_limit();
  float left_x_limit() const;
  void set_left_x_limit(float value);
  private:
  float _internal_left_x_limit() const;
  void _internal_set_left_x_limit(float value);
  public:

  // optional float right_x_limit = 2;
  bool has_right_x_limit() const;
  private:
  bool _internal_has_right_x_limit() const;
  public:
  void clear_right_x_limit();
  float right_x_limit() const;
  void set_right_x_limit(float value);
  private:
  float _internal_right_x_limit() const;
  void _internal_set_right_x_limit(float value);
  public:

  // optional float robot_x_limit = 3;
  bool has_robot_x_limit() const;
  private:
  bool _internal_has_robot_x_limit() const;
  public:
  void clear_robot_x_limit();
  float robot_x_limit() const;
  void set_robot_x_limit(float value);
  private:
  float _internal_robot_x_limit() const;
  void _internal_set_robot_x_limit(float value);
  public:

  // optional float left_random_min_x = 4;
  bool has_left_random_min_x() const;
  private:
  bool _internal_has_left_random_min_x() const;
  public:
  void clear_left_random_min_x();
  float left_random_min_x() const;
  void set_left_random_min_x(float value);
  private:
  float _internal_left_random_min_x() const;
  void _internal_set_left_random_min_x(float value);
  public:

  // optional float left_random_max_x = 5;
  bool has_left_random_max_x() const;
  private:
  bool _internal_has_left_random_max_x() const;
  public:
  void clear_left_random_max_x();
  float left_random_max_x() const;
  void set_left_random_max_x(float value);
  private:
  float _internal_left_random_max_x() const;
  void _internal_set_left_random_max_x(float value);
  public:

  // optional float right_random_min_x = 6;
  bool has_right_random_min_x() const;
  private:
  bool _internal_has_right_random_min_x() const;
  public:
  void clear_right_random_min_x();
  float right_random_min_x() const;
  void set_right_random_min_x(float value);
  private:
  float _internal_right_random_min_x() const;
  void _internal_set_right_random_min_x(float value);
  public:

  // optional float right_random_max_x = 7;
  bool has_right_random_max_x() const;
  private:
  bool _internal_has_right_random_max_x() const;
  public:
  void clear_right_random_max_x();
  float right_random_max_x() const;
  void set_right_random_max_x(float value);
  private:
  float _internal_right_random_max_x() const;
  void _internal_set_right_random_max_x(float value);
  public:

  // @@protoc_insertion_point(class_scope:hero_decision.EscapeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float left_x_limit_;
  float right_x_limit_;
  float robot_x_limit_;
  float left_random_min_x_;
  float left_random_max_x_;
  float right_random_min_x_;
  float right_random_max_x_;
  friend struct ::TableStruct_decision_2eproto;
};
// -------------------------------------------------------------------

class SearchConstraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.SearchConstraint) */ {
 public:
  inline SearchConstraint() : SearchConstraint(nullptr) {};
  virtual ~SearchConstraint();

  SearchConstraint(const SearchConstraint& from);
  SearchConstraint(SearchConstraint&& from) noexcept
    : SearchConstraint() {
    *this = ::std::move(from);
  }

  inline SearchConstraint& operator=(const SearchConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchConstraint& operator=(SearchConstraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchConstraint* internal_default_instance() {
    return reinterpret_cast<const SearchConstraint*>(
               &_SearchConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchConstraint& a, SearchConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchConstraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchConstraint* New() const final {
    return CreateMaybeMessage<SearchConstraint>(nullptr);
  }

  SearchConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchConstraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchConstraint& from);
  void MergeFrom(const SearchConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchConstraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.SearchConstraint";
  }
  protected:
  explicit SearchConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXLimitFieldNumber = 1,
    kYLimitFieldNumber = 2,
  };
  // optional float x_limit = 1;
  bool has_x_limit() const;
  private:
  bool _internal_has_x_limit() const;
  public:
  void clear_x_limit();
  float x_limit() const;
  void set_x_limit(float value);
  private:
  float _internal_x_limit() const;
  void _internal_set_x_limit(float value);
  public:

  // optional float y_limit = 2;
  bool has_y_limit() const;
  private:
  bool _internal_has_y_limit() const;
  public:
  void clear_y_limit();
  float y_limit() const;
  void set_y_limit(float value);
  private:
  float _internal_y_limit() const;
  void _internal_set_y_limit(float value);
  public:

  // @@protoc_insertion_point(class_scope:hero_decision.SearchConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_limit_;
  float y_limit_;
  friend struct ::TableStruct_decision_2eproto;
};
// -------------------------------------------------------------------

class WhirlVel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.WhirlVel) */ {
 public:
  inline WhirlVel() : WhirlVel(nullptr) {};
  virtual ~WhirlVel();

  WhirlVel(const WhirlVel& from);
  WhirlVel(WhirlVel&& from) noexcept
    : WhirlVel() {
    *this = ::std::move(from);
  }

  inline WhirlVel& operator=(const WhirlVel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhirlVel& operator=(WhirlVel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WhirlVel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WhirlVel* internal_default_instance() {
    return reinterpret_cast<const WhirlVel*>(
               &_WhirlVel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WhirlVel& a, WhirlVel& b) {
    a.Swap(&b);
  }
  inline void Swap(WhirlVel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhirlVel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WhirlVel* New() const final {
    return CreateMaybeMessage<WhirlVel>(nullptr);
  }

  WhirlVel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WhirlVel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WhirlVel& from);
  void MergeFrom(const WhirlVel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WhirlVel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.WhirlVel";
  }
  protected:
  explicit WhirlVel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleXVelFieldNumber = 1,
    kAngleYVelFieldNumber = 2,
    kAngleZVelFieldNumber = 3,
  };
  // optional float angle_x_vel = 1;
  bool has_angle_x_vel() const;
  private:
  bool _internal_has_angle_x_vel() const;
  public:
  void clear_angle_x_vel();
  float angle_x_vel() const;
  void set_angle_x_vel(float value);
  private:
  float _internal_angle_x_vel() const;
  void _internal_set_angle_x_vel(float value);
  public:

  // optional float angle_y_vel = 2;
  bool has_angle_y_vel() const;
  private:
  bool _internal_has_angle_y_vel() const;
  public:
  void clear_angle_y_vel();
  float angle_y_vel() const;
  void set_angle_y_vel(float value);
  private:
  float _internal_angle_y_vel() const;
  void _internal_set_angle_y_vel(float value);
  public:

  // optional float angle_z_vel = 3;
  bool has_angle_z_vel() const;
  private:
  bool _internal_has_angle_z_vel() const;
  public:
  void clear_angle_z_vel();
  float angle_z_vel() const;
  void set_angle_z_vel(float value);
  private:
  float _internal_angle_z_vel() const;
  void _internal_set_angle_z_vel(float value);
  public:

  // @@protoc_insertion_point(class_scope:hero_decision.WhirlVel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float angle_x_vel_;
  float angle_y_vel_;
  float angle_z_vel_;
  friend struct ::TableStruct_decision_2eproto;
};
// -------------------------------------------------------------------

class MultiRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.MultiRobot) */ {
 public:
  inline MultiRobot() : MultiRobot(nullptr) {};
  virtual ~MultiRobot();

  MultiRobot(const MultiRobot& from);
  MultiRobot(MultiRobot&& from) noexcept
    : MultiRobot() {
    *this = ::std::move(from);
  }

  inline MultiRobot& operator=(const MultiRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiRobot& operator=(MultiRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiRobot* internal_default_instance() {
    return reinterpret_cast<const MultiRobot*>(
               &_MultiRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultiRobot& a, MultiRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiRobot* New() const final {
    return CreateMaybeMessage<MultiRobot>(nullptr);
  }

  MultiRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiRobot& from);
  void MergeFrom(const MultiRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.MultiRobot";
  }
  protected:
  explicit MultiRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPositionFieldNumber = 7,
  };
  // optional .hero_decision.Point start_position = 7;
  bool has_start_position() const;
  private:
  bool _internal_has_start_position() const;
  public:
  void clear_start_position();
  const ::hero_decision::Point& start_position() const;
  ::hero_decision::Point* release_start_position();
  ::hero_decision::Point* mutable_start_position();
  void set_allocated_start_position(::hero_decision::Point* start_position);
  private:
  const ::hero_decision::Point& _internal_start_position() const;
  ::hero_decision::Point* _internal_mutable_start_position();
  public:
  void unsafe_arena_set_allocated_start_position(
      ::hero_decision::Point* start_position);
  ::hero_decision::Point* unsafe_arena_release_start_position();

  // @@protoc_insertion_point(class_scope:hero_decision.MultiRobot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hero_decision::Point* start_position_;
  friend struct ::TableStruct_decision_2eproto;
};
// -------------------------------------------------------------------

class DecisionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hero_decision.DecisionConfig) */ {
 public:
  inline DecisionConfig() : DecisionConfig(nullptr) {};
  virtual ~DecisionConfig();

  DecisionConfig(const DecisionConfig& from);
  DecisionConfig(DecisionConfig&& from) noexcept
    : DecisionConfig() {
    *this = ::std::move(from);
  }

  inline DecisionConfig& operator=(const DecisionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionConfig& operator=(DecisionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecisionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecisionConfig* internal_default_instance() {
    return reinterpret_cast<const DecisionConfig*>(
               &_DecisionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DecisionConfig& a, DecisionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecisionConfig* New() const final {
    return CreateMaybeMessage<DecisionConfig>(nullptr);
  }

  DecisionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecisionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecisionConfig& from);
  void MergeFrom(const DecisionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hero_decision.DecisionConfig";
  }
  protected:
  explicit DecisionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decision_2eproto);
    return ::descriptor_table_decision_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kBuffPointFieldNumber = 5,
    kSearchRegion1FieldNumber = 11,
    kSearchRegion2FieldNumber = 12,
    kSearchRegion3FieldNumber = 13,
    kSearchRegion4FieldNumber = 14,
    kEscapeFieldNumber = 4,
    kSearchLimitFieldNumber = 6,
    kWhirlVelFieldNumber = 7,
    kWingBotFieldNumber = 8,
    kMasterBotFieldNumber = 9,
    kWingBotTaskPointFieldNumber = 10,
    kSimulateFieldNumber = 2,
    kMasterFieldNumber = 3,
  };
  // repeated .hero_decision.Point point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::hero_decision::Point* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_point();
  private:
  const ::hero_decision::Point& _internal_point(int index) const;
  ::hero_decision::Point* _internal_add_point();
  public:
  const ::hero_decision::Point& point(int index) const;
  ::hero_decision::Point* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      point() const;

  // repeated .hero_decision.Point buff_point = 5;
  int buff_point_size() const;
  private:
  int _internal_buff_point_size() const;
  public:
  void clear_buff_point();
  ::hero_decision::Point* mutable_buff_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_buff_point();
  private:
  const ::hero_decision::Point& _internal_buff_point(int index) const;
  ::hero_decision::Point* _internal_add_buff_point();
  public:
  const ::hero_decision::Point& buff_point(int index) const;
  ::hero_decision::Point* add_buff_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      buff_point() const;

  // repeated .hero_decision.Point search_region_1 = 11;
  int search_region_1_size() const;
  private:
  int _internal_search_region_1_size() const;
  public:
  void clear_search_region_1();
  ::hero_decision::Point* mutable_search_region_1(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_search_region_1();
  private:
  const ::hero_decision::Point& _internal_search_region_1(int index) const;
  ::hero_decision::Point* _internal_add_search_region_1();
  public:
  const ::hero_decision::Point& search_region_1(int index) const;
  ::hero_decision::Point* add_search_region_1();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      search_region_1() const;

  // repeated .hero_decision.Point search_region_2 = 12;
  int search_region_2_size() const;
  private:
  int _internal_search_region_2_size() const;
  public:
  void clear_search_region_2();
  ::hero_decision::Point* mutable_search_region_2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_search_region_2();
  private:
  const ::hero_decision::Point& _internal_search_region_2(int index) const;
  ::hero_decision::Point* _internal_add_search_region_2();
  public:
  const ::hero_decision::Point& search_region_2(int index) const;
  ::hero_decision::Point* add_search_region_2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      search_region_2() const;

  // repeated .hero_decision.Point search_region_3 = 13;
  int search_region_3_size() const;
  private:
  int _internal_search_region_3_size() const;
  public:
  void clear_search_region_3();
  ::hero_decision::Point* mutable_search_region_3(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_search_region_3();
  private:
  const ::hero_decision::Point& _internal_search_region_3(int index) const;
  ::hero_decision::Point* _internal_add_search_region_3();
  public:
  const ::hero_decision::Point& search_region_3(int index) const;
  ::hero_decision::Point* add_search_region_3();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      search_region_3() const;

  // repeated .hero_decision.Point search_region_4 = 14;
  int search_region_4_size() const;
  private:
  int _internal_search_region_4_size() const;
  public:
  void clear_search_region_4();
  ::hero_decision::Point* mutable_search_region_4(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
      mutable_search_region_4();
  private:
  const ::hero_decision::Point& _internal_search_region_4(int index) const;
  ::hero_decision::Point* _internal_add_search_region_4();
  public:
  const ::hero_decision::Point& search_region_4(int index) const;
  ::hero_decision::Point* add_search_region_4();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
      search_region_4() const;

  // optional .hero_decision.EscapeConstraint escape = 4;
  bool has_escape() const;
  private:
  bool _internal_has_escape() const;
  public:
  void clear_escape();
  const ::hero_decision::EscapeConstraint& escape() const;
  ::hero_decision::EscapeConstraint* release_escape();
  ::hero_decision::EscapeConstraint* mutable_escape();
  void set_allocated_escape(::hero_decision::EscapeConstraint* escape);
  private:
  const ::hero_decision::EscapeConstraint& _internal_escape() const;
  ::hero_decision::EscapeConstraint* _internal_mutable_escape();
  public:
  void unsafe_arena_set_allocated_escape(
      ::hero_decision::EscapeConstraint* escape);
  ::hero_decision::EscapeConstraint* unsafe_arena_release_escape();

  // optional .hero_decision.SearchConstraint search_limit = 6;
  bool has_search_limit() const;
  private:
  bool _internal_has_search_limit() const;
  public:
  void clear_search_limit();
  const ::hero_decision::SearchConstraint& search_limit() const;
  ::hero_decision::SearchConstraint* release_search_limit();
  ::hero_decision::SearchConstraint* mutable_search_limit();
  void set_allocated_search_limit(::hero_decision::SearchConstraint* search_limit);
  private:
  const ::hero_decision::SearchConstraint& _internal_search_limit() const;
  ::hero_decision::SearchConstraint* _internal_mutable_search_limit();
  public:
  void unsafe_arena_set_allocated_search_limit(
      ::hero_decision::SearchConstraint* search_limit);
  ::hero_decision::SearchConstraint* unsafe_arena_release_search_limit();

  // optional .hero_decision.WhirlVel whirl_vel = 7;
  bool has_whirl_vel() const;
  private:
  bool _internal_has_whirl_vel() const;
  public:
  void clear_whirl_vel();
  const ::hero_decision::WhirlVel& whirl_vel() const;
  ::hero_decision::WhirlVel* release_whirl_vel();
  ::hero_decision::WhirlVel* mutable_whirl_vel();
  void set_allocated_whirl_vel(::hero_decision::WhirlVel* whirl_vel);
  private:
  const ::hero_decision::WhirlVel& _internal_whirl_vel() const;
  ::hero_decision::WhirlVel* _internal_mutable_whirl_vel();
  public:
  void unsafe_arena_set_allocated_whirl_vel(
      ::hero_decision::WhirlVel* whirl_vel);
  ::hero_decision::WhirlVel* unsafe_arena_release_whirl_vel();

  // optional .hero_decision.MultiRobot wing_bot = 8;
  bool has_wing_bot() const;
  private:
  bool _internal_has_wing_bot() const;
  public:
  void clear_wing_bot();
  const ::hero_decision::MultiRobot& wing_bot() const;
  ::hero_decision::MultiRobot* release_wing_bot();
  ::hero_decision::MultiRobot* mutable_wing_bot();
  void set_allocated_wing_bot(::hero_decision::MultiRobot* wing_bot);
  private:
  const ::hero_decision::MultiRobot& _internal_wing_bot() const;
  ::hero_decision::MultiRobot* _internal_mutable_wing_bot();
  public:
  void unsafe_arena_set_allocated_wing_bot(
      ::hero_decision::MultiRobot* wing_bot);
  ::hero_decision::MultiRobot* unsafe_arena_release_wing_bot();

  // optional .hero_decision.MultiRobot master_bot = 9;
  bool has_master_bot() const;
  private:
  bool _internal_has_master_bot() const;
  public:
  void clear_master_bot();
  const ::hero_decision::MultiRobot& master_bot() const;
  ::hero_decision::MultiRobot* release_master_bot();
  ::hero_decision::MultiRobot* mutable_master_bot();
  void set_allocated_master_bot(::hero_decision::MultiRobot* master_bot);
  private:
  const ::hero_decision::MultiRobot& _internal_master_bot() const;
  ::hero_decision::MultiRobot* _internal_mutable_master_bot();
  public:
  void unsafe_arena_set_allocated_master_bot(
      ::hero_decision::MultiRobot* master_bot);
  ::hero_decision::MultiRobot* unsafe_arena_release_master_bot();

  // optional .hero_decision.Point wing_bot_task_point = 10;
  bool has_wing_bot_task_point() const;
  private:
  bool _internal_has_wing_bot_task_point() const;
  public:
  void clear_wing_bot_task_point();
  const ::hero_decision::Point& wing_bot_task_point() const;
  ::hero_decision::Point* release_wing_bot_task_point();
  ::hero_decision::Point* mutable_wing_bot_task_point();
  void set_allocated_wing_bot_task_point(::hero_decision::Point* wing_bot_task_point);
  private:
  const ::hero_decision::Point& _internal_wing_bot_task_point() const;
  ::hero_decision::Point* _internal_mutable_wing_bot_task_point();
  public:
  void unsafe_arena_set_allocated_wing_bot_task_point(
      ::hero_decision::Point* wing_bot_task_point);
  ::hero_decision::Point* unsafe_arena_release_wing_bot_task_point();

  // optional bool simulate = 2 [default = false];
  bool has_simulate() const;
  private:
  bool _internal_has_simulate() const;
  public:
  void clear_simulate();
  bool simulate() const;
  void set_simulate(bool value);
  private:
  bool _internal_simulate() const;
  void _internal_set_simulate(bool value);
  public:

  // optional bool master = 3 [default = false];
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  bool master() const;
  void set_master(bool value);
  private:
  bool _internal_master() const;
  void _internal_set_master(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hero_decision.DecisionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > buff_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > search_region_1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > search_region_2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > search_region_3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point > search_region_4_;
  ::hero_decision::EscapeConstraint* escape_;
  ::hero_decision::SearchConstraint* search_limit_;
  ::hero_decision::WhirlVel* whirl_vel_;
  ::hero_decision::MultiRobot* wing_bot_;
  ::hero_decision::MultiRobot* master_bot_;
  ::hero_decision::Point* wing_bot_task_point_;
  bool simulate_;
  bool master_;
  friend struct ::TableStruct_decision_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// optional float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.x)
}

// optional float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.y)
}

// optional float z = 3;
inline bool Point::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point::has_z() const {
  return _internal_has_z();
}
inline void Point::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Point::_internal_z() const {
  return z_;
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Point::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.z)
}

// optional float roll = 4;
inline bool Point::_internal_has_roll() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Point::has_roll() const {
  return _internal_has_roll();
}
inline void Point::clear_roll() {
  roll_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Point::_internal_roll() const {
  return roll_;
}
inline float Point::roll() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.roll)
  return _internal_roll();
}
inline void Point::_internal_set_roll(float value) {
  _has_bits_[0] |= 0x00000008u;
  roll_ = value;
}
inline void Point::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.roll)
}

// optional float pitch = 5;
inline bool Point::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Point::has_pitch() const {
  return _internal_has_pitch();
}
inline void Point::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Point::_internal_pitch() const {
  return pitch_;
}
inline float Point::pitch() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.pitch)
  return _internal_pitch();
}
inline void Point::_internal_set_pitch(float value) {
  _has_bits_[0] |= 0x00000010u;
  pitch_ = value;
}
inline void Point::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.pitch)
}

// optional float yaw = 6;
inline bool Point::_internal_has_yaw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Point::has_yaw() const {
  return _internal_has_yaw();
}
inline void Point::clear_yaw() {
  yaw_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Point::_internal_yaw() const {
  return yaw_;
}
inline float Point::yaw() const {
  // @@protoc_insertion_point(field_get:hero_decision.Point.yaw)
  return _internal_yaw();
}
inline void Point::_internal_set_yaw(float value) {
  _has_bits_[0] |= 0x00000020u;
  yaw_ = value;
}
inline void Point::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:hero_decision.Point.yaw)
}

// -------------------------------------------------------------------

// EscapeConstraint

// optional float left_x_limit = 1;
inline bool EscapeConstraint::_internal_has_left_x_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EscapeConstraint::has_left_x_limit() const {
  return _internal_has_left_x_limit();
}
inline void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float EscapeConstraint::_internal_left_x_limit() const {
  return left_x_limit_;
}
inline float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.left_x_limit)
  return _internal_left_x_limit();
}
inline void EscapeConstraint::_internal_set_left_x_limit(float value) {
  _has_bits_[0] |= 0x00000001u;
  left_x_limit_ = value;
}
inline void EscapeConstraint::set_left_x_limit(float value) {
  _internal_set_left_x_limit(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
inline bool EscapeConstraint::_internal_has_right_x_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EscapeConstraint::has_right_x_limit() const {
  return _internal_has_right_x_limit();
}
inline void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float EscapeConstraint::_internal_right_x_limit() const {
  return right_x_limit_;
}
inline float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.right_x_limit)
  return _internal_right_x_limit();
}
inline void EscapeConstraint::_internal_set_right_x_limit(float value) {
  _has_bits_[0] |= 0x00000002u;
  right_x_limit_ = value;
}
inline void EscapeConstraint::set_right_x_limit(float value) {
  _internal_set_right_x_limit(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
inline bool EscapeConstraint::_internal_has_robot_x_limit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EscapeConstraint::has_robot_x_limit() const {
  return _internal_has_robot_x_limit();
}
inline void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float EscapeConstraint::_internal_robot_x_limit() const {
  return robot_x_limit_;
}
inline float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.robot_x_limit)
  return _internal_robot_x_limit();
}
inline void EscapeConstraint::_internal_set_robot_x_limit(float value) {
  _has_bits_[0] |= 0x00000004u;
  robot_x_limit_ = value;
}
inline void EscapeConstraint::set_robot_x_limit(float value) {
  _internal_set_robot_x_limit(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
inline bool EscapeConstraint::_internal_has_left_random_min_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EscapeConstraint::has_left_random_min_x() const {
  return _internal_has_left_random_min_x();
}
inline void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float EscapeConstraint::_internal_left_random_min_x() const {
  return left_random_min_x_;
}
inline float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.left_random_min_x)
  return _internal_left_random_min_x();
}
inline void EscapeConstraint::_internal_set_left_random_min_x(float value) {
  _has_bits_[0] |= 0x00000008u;
  left_random_min_x_ = value;
}
inline void EscapeConstraint::set_left_random_min_x(float value) {
  _internal_set_left_random_min_x(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
inline bool EscapeConstraint::_internal_has_left_random_max_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EscapeConstraint::has_left_random_max_x() const {
  return _internal_has_left_random_max_x();
}
inline void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float EscapeConstraint::_internal_left_random_max_x() const {
  return left_random_max_x_;
}
inline float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.left_random_max_x)
  return _internal_left_random_max_x();
}
inline void EscapeConstraint::_internal_set_left_random_max_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  left_random_max_x_ = value;
}
inline void EscapeConstraint::set_left_random_max_x(float value) {
  _internal_set_left_random_max_x(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
inline bool EscapeConstraint::_internal_has_right_random_min_x() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EscapeConstraint::has_right_random_min_x() const {
  return _internal_has_right_random_min_x();
}
inline void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float EscapeConstraint::_internal_right_random_min_x() const {
  return right_random_min_x_;
}
inline float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.right_random_min_x)
  return _internal_right_random_min_x();
}
inline void EscapeConstraint::_internal_set_right_random_min_x(float value) {
  _has_bits_[0] |= 0x00000020u;
  right_random_min_x_ = value;
}
inline void EscapeConstraint::set_right_random_min_x(float value) {
  _internal_set_right_random_min_x(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
inline bool EscapeConstraint::_internal_has_right_random_max_x() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EscapeConstraint::has_right_random_max_x() const {
  return _internal_has_right_random_max_x();
}
inline void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float EscapeConstraint::_internal_right_random_max_x() const {
  return right_random_max_x_;
}
inline float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:hero_decision.EscapeConstraint.right_random_max_x)
  return _internal_right_random_max_x();
}
inline void EscapeConstraint::_internal_set_right_random_max_x(float value) {
  _has_bits_[0] |= 0x00000040u;
  right_random_max_x_ = value;
}
inline void EscapeConstraint::set_right_random_max_x(float value) {
  _internal_set_right_random_max_x(value);
  // @@protoc_insertion_point(field_set:hero_decision.EscapeConstraint.right_random_max_x)
}

// -------------------------------------------------------------------

// SearchConstraint

// optional float x_limit = 1;
inline bool SearchConstraint::_internal_has_x_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchConstraint::has_x_limit() const {
  return _internal_has_x_limit();
}
inline void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SearchConstraint::_internal_x_limit() const {
  return x_limit_;
}
inline float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.SearchConstraint.x_limit)
  return _internal_x_limit();
}
inline void SearchConstraint::_internal_set_x_limit(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_limit_ = value;
}
inline void SearchConstraint::set_x_limit(float value) {
  _internal_set_x_limit(value);
  // @@protoc_insertion_point(field_set:hero_decision.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
inline bool SearchConstraint::_internal_has_y_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchConstraint::has_y_limit() const {
  return _internal_has_y_limit();
}
inline void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SearchConstraint::_internal_y_limit() const {
  return y_limit_;
}
inline float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.SearchConstraint.y_limit)
  return _internal_y_limit();
}
inline void SearchConstraint::_internal_set_y_limit(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_limit_ = value;
}
inline void SearchConstraint::set_y_limit(float value) {
  _internal_set_y_limit(value);
  // @@protoc_insertion_point(field_set:hero_decision.SearchConstraint.y_limit)
}

// -------------------------------------------------------------------

// WhirlVel

// optional float angle_x_vel = 1;
inline bool WhirlVel::_internal_has_angle_x_vel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WhirlVel::has_angle_x_vel() const {
  return _internal_has_angle_x_vel();
}
inline void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float WhirlVel::_internal_angle_x_vel() const {
  return angle_x_vel_;
}
inline float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:hero_decision.WhirlVel.angle_x_vel)
  return _internal_angle_x_vel();
}
inline void WhirlVel::_internal_set_angle_x_vel(float value) {
  _has_bits_[0] |= 0x00000001u;
  angle_x_vel_ = value;
}
inline void WhirlVel::set_angle_x_vel(float value) {
  _internal_set_angle_x_vel(value);
  // @@protoc_insertion_point(field_set:hero_decision.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
inline bool WhirlVel::_internal_has_angle_y_vel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WhirlVel::has_angle_y_vel() const {
  return _internal_has_angle_y_vel();
}
inline void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float WhirlVel::_internal_angle_y_vel() const {
  return angle_y_vel_;
}
inline float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:hero_decision.WhirlVel.angle_y_vel)
  return _internal_angle_y_vel();
}
inline void WhirlVel::_internal_set_angle_y_vel(float value) {
  _has_bits_[0] |= 0x00000002u;
  angle_y_vel_ = value;
}
inline void WhirlVel::set_angle_y_vel(float value) {
  _internal_set_angle_y_vel(value);
  // @@protoc_insertion_point(field_set:hero_decision.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
inline bool WhirlVel::_internal_has_angle_z_vel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WhirlVel::has_angle_z_vel() const {
  return _internal_has_angle_z_vel();
}
inline void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float WhirlVel::_internal_angle_z_vel() const {
  return angle_z_vel_;
}
inline float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:hero_decision.WhirlVel.angle_z_vel)
  return _internal_angle_z_vel();
}
inline void WhirlVel::_internal_set_angle_z_vel(float value) {
  _has_bits_[0] |= 0x00000004u;
  angle_z_vel_ = value;
}
inline void WhirlVel::set_angle_z_vel(float value) {
  _internal_set_angle_z_vel(value);
  // @@protoc_insertion_point(field_set:hero_decision.WhirlVel.angle_z_vel)
}

// -------------------------------------------------------------------

// MultiRobot

// optional .hero_decision.Point start_position = 7;
inline bool MultiRobot::_internal_has_start_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_position_ != nullptr);
  return value;
}
inline bool MultiRobot::has_start_position() const {
  return _internal_has_start_position();
}
inline void MultiRobot::clear_start_position() {
  if (start_position_ != nullptr) start_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hero_decision::Point& MultiRobot::_internal_start_position() const {
  const ::hero_decision::Point* p = start_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::Point*>(
      &::hero_decision::_Point_default_instance_);
}
inline const ::hero_decision::Point& MultiRobot::start_position() const {
  // @@protoc_insertion_point(field_get:hero_decision.MultiRobot.start_position)
  return _internal_start_position();
}
inline void MultiRobot::unsafe_arena_set_allocated_start_position(
    ::hero_decision::Point* start_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_position_);
  }
  start_position_ = start_position;
  if (start_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.MultiRobot.start_position)
}
inline ::hero_decision::Point* MultiRobot::release_start_position() {
  auto temp = unsafe_arena_release_start_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::Point* MultiRobot::unsafe_arena_release_start_position() {
  // @@protoc_insertion_point(field_release:hero_decision.MultiRobot.start_position)
  _has_bits_[0] &= ~0x00000001u;
  ::hero_decision::Point* temp = start_position_;
  start_position_ = nullptr;
  return temp;
}
inline ::hero_decision::Point* MultiRobot::_internal_mutable_start_position() {
  _has_bits_[0] |= 0x00000001u;
  if (start_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::Point>(GetArena());
    start_position_ = p;
  }
  return start_position_;
}
inline ::hero_decision::Point* MultiRobot::mutable_start_position() {
  // @@protoc_insertion_point(field_mutable:hero_decision.MultiRobot.start_position)
  return _internal_mutable_start_position();
}
inline void MultiRobot::set_allocated_start_position(::hero_decision::Point* start_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_position_;
  }
  if (start_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_position);
    if (message_arena != submessage_arena) {
      start_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_position_ = start_position;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.MultiRobot.start_position)
}

// -------------------------------------------------------------------

// DecisionConfig

// repeated .hero_decision.Point point = 1;
inline int DecisionConfig::_internal_point_size() const {
  return point_.size();
}
inline int DecisionConfig::point_size() const {
  return _internal_point_size();
}
inline void DecisionConfig::clear_point() {
  point_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.point)
  return &point_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::point(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.point)
  return _internal_point(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_point() {
  return point_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_point() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::point() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.point)
  return point_;
}

// optional bool simulate = 2 [default = false];
inline bool DecisionConfig::_internal_has_simulate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DecisionConfig::has_simulate() const {
  return _internal_has_simulate();
}
inline void DecisionConfig::clear_simulate() {
  simulate_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool DecisionConfig::_internal_simulate() const {
  return simulate_;
}
inline bool DecisionConfig::simulate() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.simulate)
  return _internal_simulate();
}
inline void DecisionConfig::_internal_set_simulate(bool value) {
  _has_bits_[0] |= 0x00000040u;
  simulate_ = value;
}
inline void DecisionConfig::set_simulate(bool value) {
  _internal_set_simulate(value);
  // @@protoc_insertion_point(field_set:hero_decision.DecisionConfig.simulate)
}

// optional bool master = 3 [default = false];
inline bool DecisionConfig::_internal_has_master() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DecisionConfig::has_master() const {
  return _internal_has_master();
}
inline void DecisionConfig::clear_master() {
  master_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool DecisionConfig::_internal_master() const {
  return master_;
}
inline bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.master)
  return _internal_master();
}
inline void DecisionConfig::_internal_set_master(bool value) {
  _has_bits_[0] |= 0x00000080u;
  master_ = value;
}
inline void DecisionConfig::set_master(bool value) {
  _internal_set_master(value);
  // @@protoc_insertion_point(field_set:hero_decision.DecisionConfig.master)
}

// optional .hero_decision.EscapeConstraint escape = 4;
inline bool DecisionConfig::_internal_has_escape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || escape_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_escape() const {
  return _internal_has_escape();
}
inline void DecisionConfig::clear_escape() {
  if (escape_ != nullptr) escape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hero_decision::EscapeConstraint& DecisionConfig::_internal_escape() const {
  const ::hero_decision::EscapeConstraint* p = escape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::EscapeConstraint*>(
      &::hero_decision::_EscapeConstraint_default_instance_);
}
inline const ::hero_decision::EscapeConstraint& DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.escape)
  return _internal_escape();
}
inline void DecisionConfig::unsafe_arena_set_allocated_escape(
    ::hero_decision::EscapeConstraint* escape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(escape_);
  }
  escape_ = escape;
  if (escape) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.escape)
}
inline ::hero_decision::EscapeConstraint* DecisionConfig::release_escape() {
  auto temp = unsafe_arena_release_escape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::EscapeConstraint* DecisionConfig::unsafe_arena_release_escape() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.escape)
  _has_bits_[0] &= ~0x00000001u;
  ::hero_decision::EscapeConstraint* temp = escape_;
  escape_ = nullptr;
  return temp;
}
inline ::hero_decision::EscapeConstraint* DecisionConfig::_internal_mutable_escape() {
  _has_bits_[0] |= 0x00000001u;
  if (escape_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::EscapeConstraint>(GetArena());
    escape_ = p;
  }
  return escape_;
}
inline ::hero_decision::EscapeConstraint* DecisionConfig::mutable_escape() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.escape)
  return _internal_mutable_escape();
}
inline void DecisionConfig::set_allocated_escape(::hero_decision::EscapeConstraint* escape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete escape_;
  }
  if (escape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(escape);
    if (message_arena != submessage_arena) {
      escape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, escape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  escape_ = escape;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.escape)
}

// repeated .hero_decision.Point buff_point = 5;
inline int DecisionConfig::_internal_buff_point_size() const {
  return buff_point_.size();
}
inline int DecisionConfig::buff_point_size() const {
  return _internal_buff_point_size();
}
inline void DecisionConfig::clear_buff_point() {
  buff_point_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_buff_point(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.buff_point)
  return buff_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_buff_point() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.buff_point)
  return &buff_point_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_buff_point(int index) const {
  return buff_point_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::buff_point(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.buff_point)
  return _internal_buff_point(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_buff_point() {
  return buff_point_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_buff_point() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.buff_point)
  return _internal_add_buff_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::buff_point() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.buff_point)
  return buff_point_;
}

// optional .hero_decision.SearchConstraint search_limit = 6;
inline bool DecisionConfig::_internal_has_search_limit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || search_limit_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_search_limit() const {
  return _internal_has_search_limit();
}
inline void DecisionConfig::clear_search_limit() {
  if (search_limit_ != nullptr) search_limit_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hero_decision::SearchConstraint& DecisionConfig::_internal_search_limit() const {
  const ::hero_decision::SearchConstraint* p = search_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::SearchConstraint*>(
      &::hero_decision::_SearchConstraint_default_instance_);
}
inline const ::hero_decision::SearchConstraint& DecisionConfig::search_limit() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.search_limit)
  return _internal_search_limit();
}
inline void DecisionConfig::unsafe_arena_set_allocated_search_limit(
    ::hero_decision::SearchConstraint* search_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_limit_);
  }
  search_limit_ = search_limit;
  if (search_limit) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.search_limit)
}
inline ::hero_decision::SearchConstraint* DecisionConfig::release_search_limit() {
  auto temp = unsafe_arena_release_search_limit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::SearchConstraint* DecisionConfig::unsafe_arena_release_search_limit() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.search_limit)
  _has_bits_[0] &= ~0x00000002u;
  ::hero_decision::SearchConstraint* temp = search_limit_;
  search_limit_ = nullptr;
  return temp;
}
inline ::hero_decision::SearchConstraint* DecisionConfig::_internal_mutable_search_limit() {
  _has_bits_[0] |= 0x00000002u;
  if (search_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::SearchConstraint>(GetArena());
    search_limit_ = p;
  }
  return search_limit_;
}
inline ::hero_decision::SearchConstraint* DecisionConfig::mutable_search_limit() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.search_limit)
  return _internal_mutable_search_limit();
}
inline void DecisionConfig::set_allocated_search_limit(::hero_decision::SearchConstraint* search_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete search_limit_;
  }
  if (search_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(search_limit);
    if (message_arena != submessage_arena) {
      search_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  search_limit_ = search_limit;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.search_limit)
}

// optional .hero_decision.WhirlVel whirl_vel = 7;
inline bool DecisionConfig::_internal_has_whirl_vel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || whirl_vel_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_whirl_vel() const {
  return _internal_has_whirl_vel();
}
inline void DecisionConfig::clear_whirl_vel() {
  if (whirl_vel_ != nullptr) whirl_vel_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hero_decision::WhirlVel& DecisionConfig::_internal_whirl_vel() const {
  const ::hero_decision::WhirlVel* p = whirl_vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::WhirlVel*>(
      &::hero_decision::_WhirlVel_default_instance_);
}
inline const ::hero_decision::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.whirl_vel)
  return _internal_whirl_vel();
}
inline void DecisionConfig::unsafe_arena_set_allocated_whirl_vel(
    ::hero_decision::WhirlVel* whirl_vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(whirl_vel_);
  }
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.whirl_vel)
}
inline ::hero_decision::WhirlVel* DecisionConfig::release_whirl_vel() {
  auto temp = unsafe_arena_release_whirl_vel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::WhirlVel* DecisionConfig::unsafe_arena_release_whirl_vel() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.whirl_vel)
  _has_bits_[0] &= ~0x00000004u;
  ::hero_decision::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = nullptr;
  return temp;
}
inline ::hero_decision::WhirlVel* DecisionConfig::_internal_mutable_whirl_vel() {
  _has_bits_[0] |= 0x00000004u;
  if (whirl_vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::WhirlVel>(GetArena());
    whirl_vel_ = p;
  }
  return whirl_vel_;
}
inline ::hero_decision::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.whirl_vel)
  return _internal_mutable_whirl_vel();
}
inline void DecisionConfig::set_allocated_whirl_vel(::hero_decision::WhirlVel* whirl_vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete whirl_vel_;
  }
  if (whirl_vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(whirl_vel);
    if (message_arena != submessage_arena) {
      whirl_vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, whirl_vel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  whirl_vel_ = whirl_vel;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.whirl_vel)
}

// optional .hero_decision.MultiRobot wing_bot = 8;
inline bool DecisionConfig::_internal_has_wing_bot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || wing_bot_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_wing_bot() const {
  return _internal_has_wing_bot();
}
inline void DecisionConfig::clear_wing_bot() {
  if (wing_bot_ != nullptr) wing_bot_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hero_decision::MultiRobot& DecisionConfig::_internal_wing_bot() const {
  const ::hero_decision::MultiRobot* p = wing_bot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::MultiRobot*>(
      &::hero_decision::_MultiRobot_default_instance_);
}
inline const ::hero_decision::MultiRobot& DecisionConfig::wing_bot() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.wing_bot)
  return _internal_wing_bot();
}
inline void DecisionConfig::unsafe_arena_set_allocated_wing_bot(
    ::hero_decision::MultiRobot* wing_bot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wing_bot_);
  }
  wing_bot_ = wing_bot;
  if (wing_bot) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.wing_bot)
}
inline ::hero_decision::MultiRobot* DecisionConfig::release_wing_bot() {
  auto temp = unsafe_arena_release_wing_bot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::MultiRobot* DecisionConfig::unsafe_arena_release_wing_bot() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.wing_bot)
  _has_bits_[0] &= ~0x00000008u;
  ::hero_decision::MultiRobot* temp = wing_bot_;
  wing_bot_ = nullptr;
  return temp;
}
inline ::hero_decision::MultiRobot* DecisionConfig::_internal_mutable_wing_bot() {
  _has_bits_[0] |= 0x00000008u;
  if (wing_bot_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::MultiRobot>(GetArena());
    wing_bot_ = p;
  }
  return wing_bot_;
}
inline ::hero_decision::MultiRobot* DecisionConfig::mutable_wing_bot() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.wing_bot)
  return _internal_mutable_wing_bot();
}
inline void DecisionConfig::set_allocated_wing_bot(::hero_decision::MultiRobot* wing_bot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wing_bot_;
  }
  if (wing_bot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wing_bot);
    if (message_arena != submessage_arena) {
      wing_bot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wing_bot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  wing_bot_ = wing_bot;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.wing_bot)
}

// optional .hero_decision.MultiRobot master_bot = 9;
inline bool DecisionConfig::_internal_has_master_bot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || master_bot_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_master_bot() const {
  return _internal_has_master_bot();
}
inline void DecisionConfig::clear_master_bot() {
  if (master_bot_ != nullptr) master_bot_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hero_decision::MultiRobot& DecisionConfig::_internal_master_bot() const {
  const ::hero_decision::MultiRobot* p = master_bot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::MultiRobot*>(
      &::hero_decision::_MultiRobot_default_instance_);
}
inline const ::hero_decision::MultiRobot& DecisionConfig::master_bot() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.master_bot)
  return _internal_master_bot();
}
inline void DecisionConfig::unsafe_arena_set_allocated_master_bot(
    ::hero_decision::MultiRobot* master_bot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_bot_);
  }
  master_bot_ = master_bot;
  if (master_bot) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.master_bot)
}
inline ::hero_decision::MultiRobot* DecisionConfig::release_master_bot() {
  auto temp = unsafe_arena_release_master_bot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::MultiRobot* DecisionConfig::unsafe_arena_release_master_bot() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.master_bot)
  _has_bits_[0] &= ~0x00000010u;
  ::hero_decision::MultiRobot* temp = master_bot_;
  master_bot_ = nullptr;
  return temp;
}
inline ::hero_decision::MultiRobot* DecisionConfig::_internal_mutable_master_bot() {
  _has_bits_[0] |= 0x00000010u;
  if (master_bot_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::MultiRobot>(GetArena());
    master_bot_ = p;
  }
  return master_bot_;
}
inline ::hero_decision::MultiRobot* DecisionConfig::mutable_master_bot() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.master_bot)
  return _internal_mutable_master_bot();
}
inline void DecisionConfig::set_allocated_master_bot(::hero_decision::MultiRobot* master_bot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete master_bot_;
  }
  if (master_bot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(master_bot);
    if (message_arena != submessage_arena) {
      master_bot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_bot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  master_bot_ = master_bot;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.master_bot)
}

// optional .hero_decision.Point wing_bot_task_point = 10;
inline bool DecisionConfig::_internal_has_wing_bot_task_point() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || wing_bot_task_point_ != nullptr);
  return value;
}
inline bool DecisionConfig::has_wing_bot_task_point() const {
  return _internal_has_wing_bot_task_point();
}
inline void DecisionConfig::clear_wing_bot_task_point() {
  if (wing_bot_task_point_ != nullptr) wing_bot_task_point_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_wing_bot_task_point() const {
  const ::hero_decision::Point* p = wing_bot_task_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hero_decision::Point*>(
      &::hero_decision::_Point_default_instance_);
}
inline const ::hero_decision::Point& DecisionConfig::wing_bot_task_point() const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.wing_bot_task_point)
  return _internal_wing_bot_task_point();
}
inline void DecisionConfig::unsafe_arena_set_allocated_wing_bot_task_point(
    ::hero_decision::Point* wing_bot_task_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wing_bot_task_point_);
  }
  wing_bot_task_point_ = wing_bot_task_point;
  if (wing_bot_task_point) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hero_decision.DecisionConfig.wing_bot_task_point)
}
inline ::hero_decision::Point* DecisionConfig::release_wing_bot_task_point() {
  auto temp = unsafe_arena_release_wing_bot_task_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hero_decision::Point* DecisionConfig::unsafe_arena_release_wing_bot_task_point() {
  // @@protoc_insertion_point(field_release:hero_decision.DecisionConfig.wing_bot_task_point)
  _has_bits_[0] &= ~0x00000020u;
  ::hero_decision::Point* temp = wing_bot_task_point_;
  wing_bot_task_point_ = nullptr;
  return temp;
}
inline ::hero_decision::Point* DecisionConfig::_internal_mutable_wing_bot_task_point() {
  _has_bits_[0] |= 0x00000020u;
  if (wing_bot_task_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::hero_decision::Point>(GetArena());
    wing_bot_task_point_ = p;
  }
  return wing_bot_task_point_;
}
inline ::hero_decision::Point* DecisionConfig::mutable_wing_bot_task_point() {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.wing_bot_task_point)
  return _internal_mutable_wing_bot_task_point();
}
inline void DecisionConfig::set_allocated_wing_bot_task_point(::hero_decision::Point* wing_bot_task_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wing_bot_task_point_;
  }
  if (wing_bot_task_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wing_bot_task_point);
    if (message_arena != submessage_arena) {
      wing_bot_task_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wing_bot_task_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  wing_bot_task_point_ = wing_bot_task_point;
  // @@protoc_insertion_point(field_set_allocated:hero_decision.DecisionConfig.wing_bot_task_point)
}

// repeated .hero_decision.Point search_region_1 = 11;
inline int DecisionConfig::_internal_search_region_1_size() const {
  return search_region_1_.size();
}
inline int DecisionConfig::search_region_1_size() const {
  return _internal_search_region_1_size();
}
inline void DecisionConfig::clear_search_region_1() {
  search_region_1_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_search_region_1(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.search_region_1)
  return search_region_1_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_search_region_1() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.search_region_1)
  return &search_region_1_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_search_region_1(int index) const {
  return search_region_1_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::search_region_1(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.search_region_1)
  return _internal_search_region_1(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_search_region_1() {
  return search_region_1_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_search_region_1() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.search_region_1)
  return _internal_add_search_region_1();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::search_region_1() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.search_region_1)
  return search_region_1_;
}

// repeated .hero_decision.Point search_region_2 = 12;
inline int DecisionConfig::_internal_search_region_2_size() const {
  return search_region_2_.size();
}
inline int DecisionConfig::search_region_2_size() const {
  return _internal_search_region_2_size();
}
inline void DecisionConfig::clear_search_region_2() {
  search_region_2_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_search_region_2(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.search_region_2)
  return search_region_2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_search_region_2() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.search_region_2)
  return &search_region_2_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_search_region_2(int index) const {
  return search_region_2_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::search_region_2(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.search_region_2)
  return _internal_search_region_2(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_search_region_2() {
  return search_region_2_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_search_region_2() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.search_region_2)
  return _internal_add_search_region_2();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::search_region_2() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.search_region_2)
  return search_region_2_;
}

// repeated .hero_decision.Point search_region_3 = 13;
inline int DecisionConfig::_internal_search_region_3_size() const {
  return search_region_3_.size();
}
inline int DecisionConfig::search_region_3_size() const {
  return _internal_search_region_3_size();
}
inline void DecisionConfig::clear_search_region_3() {
  search_region_3_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_search_region_3(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.search_region_3)
  return search_region_3_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_search_region_3() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.search_region_3)
  return &search_region_3_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_search_region_3(int index) const {
  return search_region_3_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::search_region_3(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.search_region_3)
  return _internal_search_region_3(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_search_region_3() {
  return search_region_3_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_search_region_3() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.search_region_3)
  return _internal_add_search_region_3();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::search_region_3() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.search_region_3)
  return search_region_3_;
}

// repeated .hero_decision.Point search_region_4 = 14;
inline int DecisionConfig::_internal_search_region_4_size() const {
  return search_region_4_.size();
}
inline int DecisionConfig::search_region_4_size() const {
  return _internal_search_region_4_size();
}
inline void DecisionConfig::clear_search_region_4() {
  search_region_4_.Clear();
}
inline ::hero_decision::Point* DecisionConfig::mutable_search_region_4(int index) {
  // @@protoc_insertion_point(field_mutable:hero_decision.DecisionConfig.search_region_4)
  return search_region_4_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >*
DecisionConfig::mutable_search_region_4() {
  // @@protoc_insertion_point(field_mutable_list:hero_decision.DecisionConfig.search_region_4)
  return &search_region_4_;
}
inline const ::hero_decision::Point& DecisionConfig::_internal_search_region_4(int index) const {
  return search_region_4_.Get(index);
}
inline const ::hero_decision::Point& DecisionConfig::search_region_4(int index) const {
  // @@protoc_insertion_point(field_get:hero_decision.DecisionConfig.search_region_4)
  return _internal_search_region_4(index);
}
inline ::hero_decision::Point* DecisionConfig::_internal_add_search_region_4() {
  return search_region_4_.Add();
}
inline ::hero_decision::Point* DecisionConfig::add_search_region_4() {
  // @@protoc_insertion_point(field_add:hero_decision.DecisionConfig.search_region_4)
  return _internal_add_search_region_4();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hero_decision::Point >&
DecisionConfig::search_region_4() const {
  // @@protoc_insertion_point(field_list:hero_decision.DecisionConfig.search_region_4)
  return search_region_4_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hero_decision

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_decision_2eproto

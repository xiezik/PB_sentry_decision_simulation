// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_layer_setting.proto

#include "obstacle_layer_setting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace hero_costmap {
class ParaObstacleLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParaObstacleLayer> _instance;
} _ParaObstacleLayer_default_instance_;
}  // namespace hero_costmap
static void InitDefaultsscc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero_costmap::_ParaObstacleLayer_default_instance_;
    new (ptr) ::hero_costmap::ParaObstacleLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero_costmap::ParaObstacleLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacle_5flayer_5fsetting_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_obstacle_5flayer_5fsetting_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacle_5flayer_5fsetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacle_5flayer_5fsetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, observation_keep_time_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, expected_update_rate_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, min_obstacle_height_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, max_obstacle_height_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, obstacle_range_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, raytrace_range_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, transform_tolerance_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, topic_string_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, sensor_frame_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, inf_is_valid_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, clearing_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, marking_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, footprint_clearing_enabled_),
  PROTOBUF_FIELD_OFFSET(::hero_costmap::ParaObstacleLayer, is_debug_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::hero_costmap::ParaObstacleLayer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero_costmap::_ParaObstacleLayer_default_instance_),
};

const char descriptor_table_protodef_obstacle_5flayer_5fsetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034obstacle_layer_setting.proto\022\014hero_cos"
  "tmap\"\362\002\n\021ParaObstacleLayer\022\035\n\025observatio"
  "n_keep_time\030\001 \002(\001\022\034\n\024expected_update_rat"
  "e\030\002 \002(\001\022\033\n\023min_obstacle_height\030\003 \002(\001\022\033\n\023"
  "max_obstacle_height\030\004 \002(\001\022\026\n\016obstacle_ra"
  "nge\030\005 \002(\001\022\026\n\016raytrace_range\030\006 \002(\001\022\033\n\023tra"
  "nsform_tolerance\030\007 \002(\001\022\024\n\014topic_string\030\010"
  " \002(\t\022\024\n\014sensor_frame\030\t \002(\t\022\024\n\014inf_is_val"
  "id\030\n \002(\010\022\020\n\010clearing\030\013 \002(\010\022\017\n\007marking\030\014 "
  "\002(\010\022\"\n\032footprint_clearing_enabled\030\r \002(\010\022"
  "\020\n\010is_debug\030\016 \002(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacle_5flayer_5fsetting_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacle_5flayer_5fsetting_2eproto_sccs[1] = {
  &scc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacle_5flayer_5fsetting_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacle_5flayer_5fsetting_2eproto = {
  false, false, descriptor_table_protodef_obstacle_5flayer_5fsetting_2eproto, "obstacle_layer_setting.proto", 417,
  &descriptor_table_obstacle_5flayer_5fsetting_2eproto_once, descriptor_table_obstacle_5flayer_5fsetting_2eproto_sccs, descriptor_table_obstacle_5flayer_5fsetting_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_obstacle_5flayer_5fsetting_2eproto::offsets,
  file_level_metadata_obstacle_5flayer_5fsetting_2eproto, 1, file_level_enum_descriptors_obstacle_5flayer_5fsetting_2eproto, file_level_service_descriptors_obstacle_5flayer_5fsetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacle_5flayer_5fsetting_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacle_5flayer_5fsetting_2eproto)), true);
namespace hero_costmap {

// ===================================================================

void ParaObstacleLayer::InitAsDefaultInstance() {
}
class ParaObstacleLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<ParaObstacleLayer>()._has_bits_);
  static void set_has_observation_keep_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expected_update_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_obstacle_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_obstacle_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_obstacle_range(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raytrace_range(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_transform_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_topic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sensor_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inf_is_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clearing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_marking(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_footprint_clearing_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

ParaObstacleLayer::ParaObstacleLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hero_costmap.ParaObstacleLayer)
}
ParaObstacleLayer::ParaObstacleLayer(const ParaObstacleLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topic_string()) {
    topic_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic_string(),
      GetArena());
  }
  sensor_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sensor_frame()) {
    sensor_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sensor_frame(),
      GetArena());
  }
  ::memcpy(&observation_keep_time_, &from.observation_keep_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_debug_) -
    reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(is_debug_));
  // @@protoc_insertion_point(copy_constructor:hero_costmap.ParaObstacleLayer)
}

void ParaObstacleLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto.base);
  topic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&observation_keep_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_debug_) -
      reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(is_debug_));
}

ParaObstacleLayer::~ParaObstacleLayer() {
  // @@protoc_insertion_point(destructor:hero_costmap.ParaObstacleLayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParaObstacleLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  topic_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParaObstacleLayer::ArenaDtor(void* object) {
  ParaObstacleLayer* _this = reinterpret_cast< ParaObstacleLayer* >(object);
  (void)_this;
}
void ParaObstacleLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParaObstacleLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParaObstacleLayer& ParaObstacleLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParaObstacleLayer_obstacle_5flayer_5fsetting_2eproto.base);
  return *internal_default_instance();
}


void ParaObstacleLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:hero_costmap.ParaObstacleLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      topic_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_frame_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&observation_keep_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raytrace_range_) -
        reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(raytrace_range_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&transform_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_debug_) -
        reinterpret_cast<char*>(&transform_tolerance_)) + sizeof(is_debug_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParaObstacleLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double observation_keep_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_observation_keep_time(&has_bits);
          observation_keep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double expected_update_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_expected_update_rate(&has_bits);
          expected_update_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double min_obstacle_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_obstacle_height(&has_bits);
          min_obstacle_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double max_obstacle_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_obstacle_height(&has_bits);
          max_obstacle_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double obstacle_range = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_obstacle_range(&has_bits);
          obstacle_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double raytrace_range = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_raytrace_range(&has_bits);
          raytrace_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double transform_tolerance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_transform_tolerance(&has_bits);
          transform_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string topic_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_topic_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero_costmap.ParaObstacleLayer.topic_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sensor_frame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sensor_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero_costmap.ParaObstacleLayer.sensor_frame");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool inf_is_valid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_inf_is_valid(&has_bits);
          inf_is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool clearing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_clearing(&has_bits);
          clearing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool marking = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_marking(&has_bits);
          marking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool footprint_clearing_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_footprint_clearing_enabled(&has_bits);
          footprint_clearing_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_debug = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_debug(&has_bits);
          is_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParaObstacleLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero_costmap.ParaObstacleLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double observation_keep_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_observation_keep_time(), target);
  }

  // required double expected_update_rate = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_expected_update_rate(), target);
  }

  // required double min_obstacle_height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_obstacle_height(), target);
  }

  // required double max_obstacle_height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_obstacle_height(), target);
  }

  // required double obstacle_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_obstacle_range(), target);
  }

  // required double raytrace_range = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_raytrace_range(), target);
  }

  // required double transform_tolerance = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_transform_tolerance(), target);
  }

  // required string topic_string = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic_string().data(), static_cast<int>(this->_internal_topic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero_costmap.ParaObstacleLayer.topic_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_topic_string(), target);
  }

  // required string sensor_frame = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sensor_frame().data(), static_cast<int>(this->_internal_sensor_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero_costmap.ParaObstacleLayer.sensor_frame");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sensor_frame(), target);
  }

  // required bool inf_is_valid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_inf_is_valid(), target);
  }

  // required bool clearing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_clearing(), target);
  }

  // required bool marking = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_marking(), target);
  }

  // required bool footprint_clearing_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_footprint_clearing_enabled(), target);
  }

  // required bool is_debug = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero_costmap.ParaObstacleLayer)
  return target;
}

size_t ParaObstacleLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hero_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (_internal_has_topic_string()) {
    // required string topic_string = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_string());
  }

  if (_internal_has_sensor_frame()) {
    // required string sensor_frame = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_frame());
  }

  if (_internal_has_observation_keep_time()) {
    // required double observation_keep_time = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_expected_update_rate()) {
    // required double expected_update_rate = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_min_obstacle_height()) {
    // required double min_obstacle_height = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_max_obstacle_height()) {
    // required double max_obstacle_height = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_obstacle_range()) {
    // required double obstacle_range = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_raytrace_range()) {
    // required double raytrace_range = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_transform_tolerance()) {
    // required double transform_tolerance = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_inf_is_valid()) {
    // required bool inf_is_valid = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_clearing()) {
    // required bool clearing = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_marking()) {
    // required bool marking = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_footprint_clearing_enabled()) {
    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_is_debug()) {
    // required bool is_debug = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParaObstacleLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string topic_string = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_string());

    // required string sensor_frame = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor_frame());

    // required double observation_keep_time = 1;
    total_size += 1 + 8;

    // required double expected_update_rate = 2;
    total_size += 1 + 8;

    // required double min_obstacle_height = 3;
    total_size += 1 + 8;

    // required double max_obstacle_height = 4;
    total_size += 1 + 8;

    // required double obstacle_range = 5;
    total_size += 1 + 8;

    // required double raytrace_range = 6;
    total_size += 1 + 8;

    // required double transform_tolerance = 7;
    total_size += 1 + 8;

    // required bool inf_is_valid = 10;
    total_size += 1 + 1;

    // required bool clearing = 11;
    total_size += 1 + 1;

    // required bool marking = 12;
    total_size += 1 + 1;

    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;

    // required bool is_debug = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParaObstacleLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero_costmap.ParaObstacleLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ParaObstacleLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParaObstacleLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero_costmap.ParaObstacleLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero_costmap.ParaObstacleLayer)
    MergeFrom(*source);
  }
}

void ParaObstacleLayer::MergeFrom(const ParaObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero_costmap.ParaObstacleLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_topic_string(from._internal_topic_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sensor_frame(from._internal_sensor_frame());
    }
    if (cached_has_bits & 0x00000004u) {
      observation_keep_time_ = from.observation_keep_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      expected_update_rate_ = from.expected_update_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_obstacle_height_ = from.min_obstacle_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_obstacle_height_ = from.max_obstacle_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      obstacle_range_ = from.obstacle_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      raytrace_range_ = from.raytrace_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      transform_tolerance_ = from.transform_tolerance_;
    }
    if (cached_has_bits & 0x00000200u) {
      inf_is_valid_ = from.inf_is_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      clearing_ = from.clearing_;
    }
    if (cached_has_bits & 0x00000800u) {
      marking_ = from.marking_;
    }
    if (cached_has_bits & 0x00001000u) {
      footprint_clearing_enabled_ = from.footprint_clearing_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_debug_ = from.is_debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParaObstacleLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero_costmap.ParaObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaObstacleLayer::CopyFrom(const ParaObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero_costmap.ParaObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaObstacleLayer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ParaObstacleLayer::InternalSwap(ParaObstacleLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_string_.Swap(&other->topic_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sensor_frame_.Swap(&other->sensor_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParaObstacleLayer, is_debug_)
      + sizeof(ParaObstacleLayer::is_debug_)
      - PROTOBUF_FIELD_OFFSET(ParaObstacleLayer, observation_keep_time_)>(
          reinterpret_cast<char*>(&observation_keep_time_),
          reinterpret_cast<char*>(&other->observation_keep_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParaObstacleLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hero_costmap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hero_costmap::ParaObstacleLayer* Arena::CreateMaybeMessage< ::hero_costmap::ParaObstacleLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hero_costmap::ParaObstacleLayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
